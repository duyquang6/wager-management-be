// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/duyquang6/wager-management-be/internal/model"
)

// WagerRepository is an autogenerated mock type for the WagerRepository type
type WagerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, wager
func (_m *WagerRepository) Create(ctx context.Context, tx *gorm.DB, wager model.Wager) (model.Wager, error) {
	ret := _m.Called(ctx, tx, wager)

	var r0 model.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, model.Wager) model.Wager); ok {
		r0 = rf(ctx, tx, wager)
	} else {
		r0 = ret.Get(0).(model.Wager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, model.Wager) error); ok {
		r1 = rf(ctx, tx, wager)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, tx, id
func (_m *WagerRepository) GetByID(ctx context.Context, tx *gorm.DB, id uint) (model.Wager, error) {
	ret := _m.Called(ctx, tx, id)

	var r0 model.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) model.Wager); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Get(0).(model.Wager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uint) error); ok {
		r1 = rf(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDAndLockForUpdate provides a mock function with given fields: ctx, tx, id
func (_m *WagerRepository) GetByIDAndLockForUpdate(ctx context.Context, tx *gorm.DB, id uint) (model.Wager, error) {
	ret := _m.Called(ctx, tx, id)

	var r0 model.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) model.Wager); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Get(0).(model.Wager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uint) error); ok {
		r1 = rf(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, tx, offset, limit
func (_m *WagerRepository) List(ctx context.Context, tx *gorm.DB, offset uint, limit uint) ([]model.Wager, error) {
	ret := _m.Called(ctx, tx, offset, limit)

	var r0 []model.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint, uint) []model.Wager); ok {
		r0 = rf(ctx, tx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uint, uint) error); ok {
		r1 = rf(ctx, tx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, wager
func (_m *WagerRepository) Update(ctx context.Context, tx *gorm.DB, wager model.Wager) (model.Wager, error) {
	ret := _m.Called(ctx, tx, wager)

	var r0 model.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, model.Wager) model.Wager); ok {
		r0 = rf(ctx, tx, wager)
	} else {
		r0 = ret.Get(0).(model.Wager)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, model.Wager) error); ok {
		r1 = rf(ctx, tx, wager)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
